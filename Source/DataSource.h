////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Application: CUBRID OLE DB Data Provider (http://www.cubrid.org/wiki_apis/entry/cubrid-oledb-driver)
// License: Released under a BSD license: http://www.cubrid.org/license, http://www.opensource.org/licenses/BSD-3-Clause
// Version: 8.4.1, compatible with CUBRID 8.4.1 release (http://www.cubrid.org/?mid=downloads&item=cubrid&os=detect)
// Date: March-April 2012
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// DataSource.h : Declaration of the CCUBRIDDataSource

#pragma once

#include <atldb.h>
#include "resource.h"       // main symbols
#include "Session.h"
#include "ProviderInfo.h"

//TODO Cleanup
//static const GUID DBPROPSET_UNIPROVIDER_DBINIT = {0x7f555b1d, 0xc6d2, 0x40ce, {0x9a, 0xb4, 0x49, 0x62, 0x78, 0x1e, 0xb6, 0x6c}};
//
//#define DBPROP_UNIPROVIDER_UNICAS_PORT	0x200
//#define UNIPROVIDER_UNICAS_PORT_Type VT_I4
//#define UNIPROVIDER_UNICAS_PORT_Flags ( DBPROPFLAGS_DBINIT | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE )
//
//#define DBPROP_UNIPROVIDER_FETCH_SIZE	0x201
//#define UNIPROVIDER_FETCH_SIZE_Type VT_I4
//#define UNIPROVIDER_FETCH_SIZE_Flags ( DBPROPFLAGS_DBINIT | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE )


class CCUBRIDExtraProperties
{
public:
	BEGIN_PROPSET_MAP(CCUBRIDExtraProperties)
		BEGIN_PROPERTY_SET(DBPROPSET_COLUMN)
		PROPERTY_INFO_ENTRY(COL_DEFAULT)
		PROPERTY_INFO_ENTRY(COL_UNIQUE)
		PROPERTY_INFO_ENTRY(COL_PRIMARYKEY)
		PROPERTY_INFO_ENTRY(COL_NULLABLE)
		PROPERTY_INFO_ENTRY(COL_FIXEDLENGTH)
		//TODO Add AutoIncrement
		END_PROPERTY_SET(DBPROPSET_COLUMN)
		BEGIN_PROPERTY_SET(DBPROPSET_INDEX)
		PROPERTY_INFO_ENTRY_VALUE(INDEX_UNIQUE, ATL_VARIANT_FALSE)
		END_PROPERTY_SET(DBPROPSET_INDEX)
	END_PROPSET_MAP()
};

//http://msdn.microsoft.com/en-us/library/bdbydxkw%28v=vs.80%29.aspx
// CCUBRIDDataSource
[
	coclass,
	threading(apartment),
	vi_progid("CUBRID.Provider"),
	progid("CUBRID.Provider.9.0"),
	version(8.4),
	uuid("15A12058-4353-4C9A-8421-23D80F25EE4E"),
	helpstring("CUBRID OLE DB Provider 8.4.1"),
	support_error_info(IDBInitialize),
	support_error_info(IDBInfo),
	registration_script("CUBRIDDataSource.rgs")
]
class ATL_NO_VTABLE CCUBRIDDataSource :
	public IDBCreateSessionImpl<CCUBRIDDataSource, CCUBRIDSession>,
	public IDBInitializeImpl<CCUBRIDDataSource>,
	public IDBPropertiesImpl<CCUBRIDDataSource>,
	public IPersistImpl<CCUBRIDDataSource>,
	public IDBInfo,
	public IInternalConnectionImpl<CCUBRIDDataSource>
{
public:
	static CCUBRIDDataSource *GetDataSourcePtr(IObjectWithSite *pSite);

public:
	ULONG	PARAM_MAX_STRING_LENGTH;

	CCUBRIDDataSource() : PARAM_MAX_STRING_LENGTH(1024)
	{
		ATLTRACE2(atlTraceDBProvider, 3, "CCUBRIDDataSource::CCUBRIDDataSource(PARAM_MAX_STRING_LENGTH(1024))\n");
	}

	~CCUBRIDDataSource()
	{
		ATLTRACE2(atlTraceDBProvider, 3, "CCUBRIDDataSource::CCUBRIDDataSource\n");
	}


	DECLARE_PROTECT_FINAL_CONSTRUCT()

	HRESULT FinalConstruct()
	{
		ATLTRACE2(atlTraceDBProvider, 3, "CCUBRIDDataSource::FinalConstruct\n");
		return FInit();
	}

	void FinalRelease()
	{
		ATLTRACE2(atlTraceDBProvider, 3, "CCUBRIDDataSource::FinalRelease\n");
	}

	virtual HRESULT	IsValidValue(ULONG iCurSet, DBPROP* pDBProp)
	{
		ATLASSERT(pDBProp);
		if(pDBProp->dwPropertyID == DBPROP_INIT_ASYNCH)
		{
			LONG val = V_I4(&pDBProp->vValue);
			if(val == 0 || val == DBPROPVAL_ASYNCH_INITIALIZE)
				return S_OK;
			return S_FALSE;
		}
		if(pDBProp->dwPropertyID == DBPROP_INIT_PROMPT)
		{
			short val = V_I2(&pDBProp->vValue);
			if(val == DBPROMPT_NOPROMPT || val == DBPROMPT_COMPLETE ||
				val == DBPROMPT_COMPLETEREQUIRED || val == DBPROMPT_PROMPT)
				return S_OK;
			return S_FALSE;
		}
		return IDBPropertiesImpl<CCUBRIDDataSource>::IsValidValue(iCurSet, pDBProp);
	}

	OUT_OF_LINE HRESULT GetDefaultValue(ULONG iPropSet, DBPROPID dwPropId, DWORD* pdwOption, VARIANT* pVar)
	{
		if( m_pUProp[iPropSet].pUPropVal &&
			(dwPropId == DBPROP_DBMSVER || dwPropId == DBPROP_PROVIDERVER ||
			dwPropId == DBPROP_CONNECTIONSTATUS || dwPropId == DBPROP_DATASOURCENAME) )
		{
			GetPropValue(&DBPROPSET_DATASOURCEINFO, dwPropId, pVar);
			return S_OK;
		}
		return IDBPropertiesImpl<CCUBRIDDataSource>::GetDefaultValue(iPropSet, dwPropId, pdwOption, pVar);
	}

	// IUnknown
	static HRESULT WINAPI InternalQueryInterface(void* pThis,
		const _ATL_INTMAP_ENTRY* pEntries, REFIID iid, void** ppvObject)
	{
		if( !(((CCUBRIDDataSource *)pThis)->m_dwStatus & DSF_INITIALIZED) )
		{
			if( InlineIsEqualGUID(iid, __uuidof(IDBCreateSession)) ||
				InlineIsEqualGUID(iid, __uuidof(IDBInfo)) )
			{
				if(ppvObject) *ppvObject = NULL;
				return E_NOINTERFACE;
			}
		}
		return CComObjectRootBase::InternalQueryInterface(pThis, pEntries, iid, ppvObject);
	}

	// IDBInitialize
	STDMETHOD(Initialize)(void);
	STDMETHOD(Uninitialize)(void);

	// IDBCreateSession
	STDMETHOD(CreateSession)(IUnknown *pUnkOuter, REFIID riid, IUnknown **ppDBSession);

	// IDBInfo
	STDMETHOD(GetLiteralInfo)(ULONG cLiterals, const DBLITERAL rgLiterals[],
		ULONG *pcLiteralInfo, DBLITERALINFO **prgLiteralInfo,
		OLECHAR **ppCharBuffer);
	STDMETHOD(GetKeywords)(LPOLESTR *ppwszKeywords);

	BEGIN_PROPSET_MAP(CCUBRIDDataSource)
		//BEGIN_PROPERTY_SET(DBPROPSET_DATASOURCE)
		//PROPERTY_INFO_ENTRY_VALUE(CURRENTCATALOG, OLESTR(""))
		//PROPERTY_INFO_ENTRY_VALUE(MULTIPLECONNECTIONS, ATL_VARIANT_TRUE)
		//PROPERTY_INFO_ENTRY_VALUE_FLAGS(RESETDATASOURCE, DBPROPVAL_RD_RESETALL, DBPROPFLAGS_DATASOURCE | DBPROPFLAGS_READ)
		//END_PROPERTY_SET(DBPROPSET_DATASOURCE)
		BEGIN_PROPERTY_SET(DBPROPSET_DATASOURCEINFO)
		PROPERTY_INFO_ENTRY_VALUE(ACTIVESESSIONS, 0)
		PROPERTY_INFO_ENTRY_VALUE(ASYNCTXNABORT, ATL_VARIANT_FALSE)
		PROPERTY_INFO_ENTRY_VALUE(ASYNCTXNCOMMIT, ATL_VARIANT_FALSE)
		//Verify this
		PROPERTY_INFO_ENTRY_VALUE_FLAGS(DBMSVER, OLESTR(""), DBPROPFLAGS_DATASOURCEINFO | DBPROPFLAGS_READ | DBPROPFLAGS_CHANGE )
		PROPERTY_INFO_ENTRY_VALUE(BYREFACCESSORS, ATL_VARIANT_FALSE)
		PROPERTY_INFO_ENTRY_VALUE(CATALOGTERM, OLESTR(""))
		PROPERTY_INFO_ENTRY_VALUE(CATALOGLOCATION, 0)
		PROPERTY_INFO_ENTRY_VALUE(CATALOGUSAGE, 0)
		PROPERTY_INFO_ENTRY_VALUE(CONCATNULLBEHAVIOR, DBPROPVAL_CB_NON_NULL)
		PROPERTY_INFO_ENTRY_VALUE_FLAGS(CONNECTIONSTATUS, DBPROPVAL_CS_UNINITIALIZED, DBPROPFLAGS_DATASOURCEINFO | DBPROPFLAGS_READ | DBPROPFLAGS_CHANGE)
		// DBPROP_DATASOURCENAME == DBPROP_INIT_LOCATION
		PROPERTY_INFO_ENTRY_VALUE_FLAGS(DATASOURCENAME, OLESTR(""), DBPROPFLAGS_DATASOURCEINFO | DBPROPFLAGS_READ | DBPROPFLAGS_CHANGE)
		PROPERTY_INFO_ENTRY_VALUE(DATASOURCEREADONLY, ATL_VARIANT_FALSE)
		PROPERTY_INFO_ENTRY_VALUE(DBMSNAME, OLESTR("CUBRID"))
		PROPERTY_INFO_ENTRY_VALUE(DSOTHREADMODEL, DBPROPVAL_RT_APTMTTHREAD)
		PROPERTY_INFO_ENTRY_VALUE(GROUPBY, DBPROPVAL_GB_CONTAINS_SELECT)
		PROPERTY_INFO_ENTRY_VALUE(IDENTIFIERCASE, DBPROPVAL_IC_MIXED)
		PROPERTY_INFO_ENTRY_VALUE(MAXINDEXSIZE, 0)
		PROPERTY_INFO_ENTRY_VALUE(MAXROWSIZE, 0)
		PROPERTY_INFO_ENTRY_VALUE(MAXTABLESINSELECT, 0)
		PROPERTY_INFO_ENTRY_VALUE(MAXROWSIZEINCLUDESBLOB, ATL_VARIANT_FALSE)
		PROPERTY_INFO_ENTRY_VALUE(MULTIPLEPARAMSETS, ATL_VARIANT_FALSE)
		PROPERTY_INFO_ENTRY_VALUE(MULTIPLERESULTS, DBPROPVAL_MR_SUPPORTED)
		PROPERTY_INFO_ENTRY_VALUE(MULTIPLESTORAGEOBJECTS, ATL_VARIANT_FALSE)
		PROPERTY_INFO_ENTRY_VALUE(MULTITABLEUPDATE, ATL_VARIANT_FALSE)
		PROPERTY_INFO_ENTRY_VALUE(NULLCOLLATION, DBPROPVAL_NC_LOW)
		PROPERTY_INFO_ENTRY_VALUE(OLEOBJECTS, DBPROPVAL_OO_BLOB | DBPROPVAL_OO_ROWOBJECT | DBPROPVAL_OO_SINGLETON)
		PROPERTY_INFO_ENTRY_VALUE(ORDERBYCOLUMNSINSELECT, ATL_VARIANT_FALSE)
		PROPERTY_INFO_ENTRY_VALUE(OUTPUTPARAMETERAVAILABILITY, DBPROPVAL_OA_NOTSUPPORTED)
		PROPERTY_INFO_ENTRY_VALUE(PROVIDERFRIENDLYNAME, OLESTR("CUBRID OLE DB Provider"))
		PROPERTY_INFO_ENTRY_VALUE(PERSISTENTIDTYPE, DBPROPVAL_PT_GUID_NAME)
		PROPERTY_INFO_ENTRY_VALUE(OPENROWSETSUPPORT, DBPROPVAL_ORS_TABLE)
		PROPERTY_INFO_ENTRY_VALUE(PREPAREABORTBEHAVIOR, DBPROPVAL_CB_DELETE)
		PROPERTY_INFO_ENTRY_VALUE(PREPARECOMMITBEHAVIOR, DBPROPVAL_CB_DELETE)
		PROPERTY_INFO_ENTRY_VALUE(PROCEDURETERM, OLESTR(""))
		PROPERTY_INFO_ENTRY_VALUE(PROVIDERNAME, OLESTR("CUBRIDProvider.dll"))
		PROPERTY_INFO_ENTRY_VALUE(PROVIDEROLEDBVER, OLESTR("02.60"))
		// DBPROP_PROVIDERVER == DBPRDBPROP_DBMSVER
		PROPERTY_INFO_ENTRY_VALUE_FLAGS(PROVIDERVER, OLESTR(""), DBPROPFLAGS_DATASOURCEINFO | DBPROPFLAGS_READ | DBPROPFLAGS_CHANGE )
		PROPERTY_INFO_ENTRY_VALUE(QUOTEDIDENTIFIERCASE, DBPROPVAL_IC_LOWER)
		PROPERTY_INFO_ENTRY_VALUE(ROWSETCONVERSIONSONCOMMAND, ATL_VARIANT_FALSE)
		PROPERTY_INFO_ENTRY_VALUE(SCHEMATERM, OLESTR(""))
		PROPERTY_INFO_ENTRY_VALUE(SCHEMAUSAGE, 0)
		PROPERTY_INFO_ENTRY_VALUE(SQLSUPPORT, DBPROPVAL_SQL_ODBC_MINIMUM | DBPROPVAL_SQL_ANSI92_ENTRY)
		PROPERTY_INFO_ENTRY_VALUE(STRUCTUREDSTORAGE, DBPROPVAL_SS_ISEQUENTIALSTREAM)
		PROPERTY_INFO_ENTRY_VALUE(SUBQUERIES, DBPROPVAL_SQ_CORRELATEDSUBQUERIES | DBPROPVAL_SQ_COMPARISON | DBPROPVAL_SQ_EXISTS | DBPROPVAL_SQ_IN | DBPROPVAL_SQ_QUANTIFIED | DBPROPVAL_SQ_TABLE)
		PROPERTY_INFO_ENTRY_VALUE(SUPPORTEDTXNDDL, DBPROPVAL_TC_DDL_LOCK)
		PROPERTY_INFO_ENTRY_VALUE(SUPPORTEDTXNISOLEVELS, DBPROPVAL_TI_READUNCOMMITTED | DBPROPVAL_TI_READCOMMITTED | DBPROPVAL_TI_REPEATABLEREAD | DBPROPVAL_TI_SERIALIZABLE)
		PROPERTY_INFO_ENTRY_VALUE(SUPPORTEDTXNISORETAIN, 0)
		PROPERTY_INFO_ENTRY_VALUE(TABLETERM, OLESTR("table"))
		END_PROPERTY_SET(DBPROPSET_DATASOURCEINFO)
		BEGIN_PROPERTY_SET(DBPROPSET_DBINIT)
#if _DEBUG
		PROPERTY_INFO_ENTRY_VALUE(INIT_LOCATION, OLESTR("localhost"))
		PROPERTY_INFO_ENTRY_VALUE(INIT_DATASOURCE, OLESTR("demodb"))
		PROPERTY_INFO_ENTRY_VALUE(AUTH_USERID, OLESTR("public"))
		PROPERTY_INFO_ENTRY_VALUE(AUTH_PASSWORD, OLESTR(""))
#else
		PROPERTY_INFO_ENTRY_VALUE(INIT_LOCATION, OLESTR("localhost"))
		PROPERTY_INFO_ENTRY_VALUE(INIT_DATASOURCE, OLESTR(""))
		PROPERTY_INFO_ENTRY_VALUE(AUTH_USERID, OLESTR("public"))
		PROPERTY_INFO_ENTRY_VALUE(AUTH_PASSWORD, OLESTR(""))
#endif
		PROPERTY_INFO_ENTRY_VALUE(AUTH_CACHE_AUTHINFO, ATL_VARIANT_FALSE)
		PROPERTY_INFO_ENTRY_VALUE(AUTH_ENCRYPT_PASSWORD, ATL_VARIANT_FALSE)
		PROPERTY_INFO_ENTRY_VALUE(AUTH_MASK_PASSWORD, ATL_VARIANT_FALSE)
		PROPERTY_INFO_ENTRY_VALUE(AUTH_PERSIST_ENCRYPTED, ATL_VARIANT_FALSE)
		PROPERTY_INFO_ENTRY_VALUE(AUTH_PERSIST_SENSITIVE_AUTHINFO, ATL_VARIANT_FALSE)
		//PROPERTY_INFO_ENTRY_VALUE(INIT_ASYNCH, 0)
		//PROPERTY_INFO_ENTRY_VALUE(INIT_HWND, 0)
		PROPERTY_INFO_ENTRY_VALUE(INIT_PROMPT, DBPROMPT_NOPROMPT)
		END_PROPERTY_SET(DBPROPSET_DBINIT)
		// Extended properties
		BEGIN_PROPERTY_SET_EX(DBPROPSET_CUBRIDPROVIDER_DBINIT, UPROPSET_USERINIT)
		PROPERTY_INFO_ENTRY_VALUE(CUBRIDPROVIDER_BROKER_PORT, 30000)
		PROPERTY_INFO_ENTRY_VALUE(CUBRIDPROVIDER_FETCH_SIZE, ProvInfo::DEFAULT_FETCH_SIZE)
		PROPERTY_INFO_ENTRY_VALUE(CUBRIDPROVIDER_LOGIN_TIMEOUT, ProvInfo::DEFAULT_LOGIN_TIMEOUT)
		PROPERTY_INFO_ENTRY_VALUE(CUBRIDPROVIDER_QUERY_TIMEOUT, ProvInfo::DEFAULT_QUERY_TIMEOUT)
		PROPERTY_INFO_ENTRY_VALUE(CUBRIDPROVIDER_AUTOCOMMIT, ProvInfo::DEFAULT_AUTOCOMMIT)
		PROPERTY_INFO_ENTRY_VALUE(CUBRIDPROVIDER_CHARSET, ProvInfo::DEFAULT_CONN_CHARSET)
		END_PROPERTY_SET(DBPROPSET_CUBRIDPROVIDER_DBINIT)
		CHAIN_PROPERTY_SET(CCUBRIDSession)
		CHAIN_PROPERTY_SET(CCUBRIDCommand)
		CHAIN_PROPERTY_SET(CCUBRIDExtraProperties)
	END_PROPSET_MAP()
};
